## A script to implement a hackish version of
## parallel:mclapply() on Windows machines.
## On Linux or Mac, the script has no effect
## beyond loading the parallel library.
require(parallel)
## Define the hack
mclapply.hack <- function(...) {
## Create a cluster
size.of.list <- length(list(...)[[1]])
cl <- makeCluster( min(size.of.list, detectCores()) )
## Find out the names of the loaded packages
loaded.package.names <- c(
## Base packages
sessionInfo()$basePkgs,
## Additional packages
names( sessionInfo()$otherPkgs ))
tryCatch( {
## Copy over all of the objects within scope to
## all clusters.
this.env <- environment()
while( identical( this.env, globalenv() ) == FALSE ) {
clusterExport(cl,
ls(all.names=TRUE, env=this.env),
envir=this.env)
this.env <- parent.env(environment())
}
clusterExport(cl,
ls(all.names=TRUE, env=globalenv()),
envir=globalenv())
## Load the libraries on all the clusters
## N.B. length(cl) returns the number of clusters
parLapply( cl, 1:length(cl), function(xx){
lapply(loaded.package.names, function(yy) {
require(yy , character.only=TRUE)})
})
## Run the lapply in parallel
return( parLapply( cl, ...) )
}, finally = {
## Stop the cluster
stopCluster(cl)
})
}
## Warn the user if they are using Windows
if( Sys.info()[['sysname']] == 'Windows' ){
message(paste(
"\n",
"   *** Microsoft Windows detected ***\n",
"   \n",
"   For technical reasons, the MS Windows version of mclapply()\n",
"   is implemented as a serial function instead of a parallel\n",
"   function.",
"   \n\n",
"   As a quick hack, we replace this serial version of mclapply()\n",
"   with a wrapper to parLapply() for this R session. Please see\n\n",
"     http://www.stat.cmu.edu/~nmv/2014/07/14/implementing-mclapply-on-windows \n\n",
"   for details.\n\n"))
}
## If the OS is Windows, set mclapply to the
## the hackish version. Otherwise, leave the
## definition alone.
mclapply <- switch( Sys.info()[['sysname']],
Windows = {mclapply.hack},
Linux   = {mclapply},
Darwin  = {mclapply})
## end mclapply.hack.R
## load in software
rm(list=ls())
library(tidyverse)
library(orderstats)
library(Pareto)
library(parallel)
library(doParallel)
library(readr)
library(EnvStats)
ncores <- detectCores() - 1
setwd("D:/UIUC/Era Adjustment/Detrended Stats R Code")
batters <- read.csv('batters_combined.csv')
pitchers <- read.csv('pitchers_combined.csv')
years <- 1871:2019
years <- 1871:2019
Ftilde <- function(y, t){
y <- sort(y)
n <- length(y)
ytilde <- rep(0, n + 1)
ytilde[1] <- y[1] - 1/(y[n]- y[1])
ytilde[n+1] <- y[n] + 1/(y[n] - y[n-3])
ytilde[2:n] <- unlist(lapply(2:n, function(j){
(y[j]+y[j-1])/2
}))
j <- length(which(ytilde < t))
(j - 1) / n + (t - ytilde[j]) / (n*(ytilde[j+1] - ytilde[j]))
}
order_pbino <- function(p = 0, k = 1, n = 1e4){
pbinom(k - 1, prob = p, size = n, lower.tail = FALSE)
}
?pbinom
Ftilde <- function(y, t){
y <- sort(y)
n <- length(y)
ytilde <- rep(0, n + 1)
ytilde[1] <- y[1] - 1/(y[n]- y[1])
ytilde[n+1] <- y[n] + 1/(y[n] - y[n-3])
ytilde[2:n] <- unlist(lapply(2:n, function(j){
(y[j]+y[j-1])/2
}))
j <- length(which(ytilde < t))
(j - 1) / n + (t - ytilde[j]) / (n*(ytilde[j+1] - ytilde[j]))
}
rep(0,2)
order_pbino <- function(p = 0, k = 1, n = 1e4){
pbinom(k - 1, prob = p, size = n, lower.tail = FALSE)
}
order_bino_vec <- function(p){
p <- sort(p) # just in case
n <- length(p)
unlist(lapply(1:n, function(j){
order_pbino(p[j], k = j, n = n)
}))
}
order_Pareto_vec <- function(u, t = 1, alpha = 1.16, npop = 1e4){
n <- length(u)
if(length(npop) == 1) npop <- rep(npop, n)
unlist(lapply(1:n, function(j){
qPareto(qbeta(u[j], j + npop[j] -n , n + 1 - j), t = t, alpha = alpha)
}))
}
order_Pareto_vec <- function(u, t = 1, alpha = 1.16, npop = 1e4){
n <- length(u)
if(length(npop) == 1) npop <- rep(npop, n)
unlist(lapply(1:n, function(j){
qPareto(qbeta(u[j], j + npop[j] -n , n + 1 - j), t = t, alpha = alpha)
}))
}
map_Pareto_vals_vec <- function(x, t = 1, alpha = 1.16, npop = 1e4){
n <- length(x)
if(length(npop) == 1) npop <- rep(npop, n)
unlist(lapply(1:n, function(j){
pbeta(pPareto(x[j], t = t, alpha = alpha), j + npop[j], n + 1 - j)
}))
}
seq(0,1)
seq(0,1,1/10)
?findInterval
findInterval(3,c(4,5,6,7,8,9,10))
findInterval(3,c(3,4,5,6,7,8,9,10))
findInterval(9,c(3,4,5,6,7,8,9,10))
findInterval(c(3,9),c(3,4,5,6,7,8,9,10))
map_Y <- function(u, ytilde){
n <- length(ytilde)-1
seqence <- seq(0, 1, 1/n)
pos <- findInterval(u, seqence)
out <- (n*u -pos + 1) * (ytilde[(pos+1)] - ytilde[pos]) + ytilde[pos]
return(out)
}
## map the quantile to the predicated sample values
order_qempirical <- function(u, ytilde){
n <- length(u)
a <- qbeta(u, shape1 = 1:n, shape2 = n:1)
out <- sapply(1:n, function(x) map_Y(a[x], ytilde = ytilde))
out
}
?do.call
do.call(function(x) x + 1, c(1,2,3,4,5))
do.call(function(x) x + 1, list(1,2,3,4,5))
do.call(function(x) x + 1, lapply(c(1,2,3,4), function(x) x^2))
lapply(c(1,2,3,4,5), function(x) x^2)
do.call(rbind, lapply(c(1,2,3,4,5), function(x) x^2))
WAR_batter_best <- do.call(rbind, mclapply(years, function(xx){
batters %>% filter(yearID == xx) %>%
arrange(WAR) %>%  mutate(mu = mean(WAR)) %>%  mutate(sigma = sd(WAR)) %>%
mutate(scale_WAR = scale(WAR)) %>% mutate(WAR_talent = order_Pareto_vec(u =
order_bino_vec(unlist(lapply(scale_WAR, function(xx)
Ftilde(y = scale_WAR, t = xx)))), npop = pops))
})) %>% arrange(-WAR_talent)
WAR_pitcher_best <- do.call(rbind, mclapply(years, function(xx){
pitchers %>% filter(yearID == xx) %>%
arrange(WAR) %>%  mutate(mu = mean(WAR)) %>%  mutate(sigma = sd(WAR)) %>%
mutate(scale_WAR = scale(WAR)) %>% mutate(WAR_talent = order_Pareto_vec(u =
order_bino_vec(unlist(lapply(scale_WAR, function(xx)
Ftilde(y = scale_WAR, t = xx)))), npop = pops))
})) %>% arrange(-WAR_talent)
write.csv(WAR_batter_best, "WAR_batter_best.csv")
write.csv(WAR_pitcher_best, "WAR_pitcher_best.csv")
?scale
arrange(c(3,4,1,7,14,9,2,1))
arrange(list(3,4,1,7,14,9,2,1))
View(order_bino_vec)
View(order_pbino)
View(order_Pareto_vec)
length(1e4)
rep(1e4, 10)
?qpareto
?qbeta
pitchers[1:5,]
pitchers[1:5,] %>% arrange(yearID)
View(Ftilde)
View(batters)
View(batters)
samp_df = batters[1:1000,]
samp_df
unique(samp_df$yearID)
samp_df = batters[1:1000,]
nyear = sort(unique(samp_df$yearID))
samp_df %>% filter(yearID == 2000)
samp_df %>% filter(yearID == 2000) %>% arrange(WAR)
samp_df %>%
filter(yearID == 2000) %>%
arrange(WAR) %>%
mutate(mu = mean(WAR)) %>%
mutate(sigma = sd(WAR))
new_df = samp_df %>%
filter(yearID == 2000) %>%
arrange(WAR) %>%
mutate(mu = mean(WAR)) %>%
mutate(sigma = sd(WAR))
new_df = samp_df %>%
filter(yearID == 2000) %>%
arrange(WAR) %>%
mutate(mu = mean(WAR)) %>%
mutate(sigma = sd(WAR))
samp_df %>%
filter(yearID == 2000) %>%
arrange(WAR) %>%
mutate(mu = mean(WAR)) %>%
mutate(sigma = sd(WAR)) %>%
mutate(scale_WAR = scale(WAR))
?scale
scale(c(1,2,3))
scale(c(1,2,3,4))
new_df = samp_df %>%
filter(yearID == 2000) %>%
arrange(WAR) %>%
mutate(mu = mean(WAR)) %>%
mutate(sigma = sd(WAR)) %>%
mutate(scale_WAR = scale(WAR))
unlist(lapply(new_df$scale_war, function(2000) Ftilde(y = scale_WAR, t = xx)))
unlist(lapply(new_df$scale_war, function(xx) Ftilde(y = scale_WAR, t = xx)))
lapply(new_df$scale_WAR, function(x) x+1)
unlist(lapply(new_df$scale_WAR, function(x) x+1))
unlist(lapply(new_df$scale_WAR, function(xx) Ftilde(y = scale_WAR, t = xx)))
unlist(lapply(new_df$scale_WAR, function(xx) Ftilde(y = new_df$scale_WAR, t = xx)))
new_df$scale_WAR
y = sort(new_df$scale_WAR)
y
n = length(y)
n
rep(0, n + 1)
ytilde = rep(0, n + 1)
length(ytilde)
y[1]
y[1]
y[n]
(y[n]- y[1])
1/(y[n]- y[1])
y[1]
y[1] - 1/(y[n]- y[1])
# Lower limit of Ytilde
ytilde[1] = y[1] - 1/(y[n]- y[1])
ytilde
y[n]
y[n-3]
ytilde[n+1] = y[n] + 1/(y[n] - y[n-3])
ytilde
unlist(lapply(2:n, function(j){
(y[j]+y[j-1])/2
}))
ytilde
ytilde[2:n] <- unlist(lapply(2:n, function(j){
(y[j]+y[j-1])/2
}))
ytilde
new_df$scale_WAR
which(ytilde < -0.96350525)
which(ytilde < 1)
which(ytilde < 0.22647503)
which(ytilde < 3.43026808)
ytilde
(3.20142572 + 3.43026808)/2
j = length(which(ytilde < 3.43026808))
(j - 1) / n
j
57/58
ytilde[j]
3.43026808 - ytilde[j]
(ytilde[j+1] - ytilde[j])
n*(ytilde[j+1] - ytilde[j])
(3.43026808 - ytilde[j]) / (n*(ytilde[j+1] - ytilde[j]))
(j - 1) / n +(3.43026808 - ytilde[j]) / (n*(ytilde[j+1] - ytilde[j]))
unlist(lapply(new_df$scale_WAR, function(xx) Ftilde(y = new_df$scale_WAR, t = xx)))
# The line below finds out the CDF of the centralized WARS
inner_vec = unlist(lapply(new_df$scale_WAR, function(xx) Ftilde(y = new_df$scale_WAR, t = xx)))
inner_vec
order_bino_vec(inner_vec)
# Lets start deconstructing order_bino_vec function
sort(inner_vec)
length(p)
# Lets start deconstructing order_bino_vec function
p = sort(inner_vec)
length(p)
n = length(p)
unlist(lapply(1:n, function(j){
order_pbino(p[j], k = j, n = n)
}))
p[1]
order_pbino(p[1], k = 1, n = n)
p[1]
pbinom(0, prob = 0.0143547, size = 58, lower.tail = FALSE)
order_bino_vec(inner_vec)
order_bino_vec(inner_vec)
order_Pareto_vec(order_bino_vec(inner_vec))
new_df$WAR_talent = order_Pareto_vec(order_bino_vec(inner_vec))
new_df
new_df %>% arrange(-WAR_talent)
samp_df = batters[1:1000,]
nyear = sort(unique(samp_df$yearID))
new_df = samp_df %>%
filter(yearID == 2012) %>%
arrange(WAR) %>%
mutate(mu = mean(WAR)) %>%
mutate(sigma = sd(WAR)) %>%
mutate(scale_WAR = scale(WAR))
# The line below finds out the CDF of the centralized WARS
inner_vec = unlist(lapply(new_df$scale_WAR, function(xx) Ftilde(y = new_df$scale_WAR, t = xx)))
new_df$WAR_talent = order_Pareto_vec(order_bino_vec(inner_vec))
new_df %>% arrange(-WAR_talent)
View(WAR_batter_best)
foo = WAR_batter_best
as.factor(foo$playerID)
droplevels(as.factor(foo$playerID))
foo$playerID <- droplevels(as.factor(foo$playerID))
View(foo)
?split
bar = split(foo, f = foo$playerID)
mu_sigma_ref = unique(foo %>% select(yearID, mu, sigma))
View(mu_sigma_ref)
colnames(mu_sigma_ref) = c("span", "new_mu", "new_sigma")
bar$`1`
bar$`2`
lapply(bar, function(xx){
ifelse(sum(xx$AB) >= 4e3,1,0)
})
bar$`1`
lapply(bar$`1`, function(xx){
ifelse(sum(xx$AB) >= 4e3,1,0)
})
xx = bar$`1`
ifelse(sum(xx$AB) >= 4e3,1,0)
xx = bar$`2`
ifelse(sum(xx$AB) >= 4e3,1,0)
unlist(lapply(bar, function(xx){
ifelse(sum(xx$AB) >= 4e3,1,0)
})) == 1)
unlist(lapply(bar, function(xx){
ifelse(sum(xx$AB) >= 4e3,1,0)
}))
length(unlist(lapply(bar, function(xx){
ifelse(sum(xx$AB) >= 4e3,1,0)
})))
which(unlist(lapply(bar, function(xx){
ifelse(sum(xx$AB) >= 4e3,1,0)
})) == 1)
index_kAB = which(unlist(lapply(bar, function(xx){
ifelse(sum(xx$AB) >= 4e3,1,0)
})) == 1)
index_kAB[1]
index_kAB[100]
arrange(bar[[2]], yearID)
talent_kAB = do.call(rbind, lapply(index_kAB, function(j){
arrange(bar[[j]], yearID)
}))
View(talent_kAB)
length(index_kAB)
talent_kAB
length(unique(talent_kAB$playerID))
?droplevels
View(xx)
myArgs <- commandArgs(trailingOnly = TRUE)
myArgs
?commandArgs
# Fetch command line arguments
myArgs <- commandArgs(trailingOnly = TRUE)
# Convert to numerics
nums = as.numeric(myArgs)
# cat will write the result to the stdout stream
cat(max(nums))
ran = data.frame(x1 = 1, x2 = 2)
View(ran)
script.dir = dirname(sys.frame(1)$ofile)
source("SampRCode.R", chdir = T)
setwd(getSrcDirectory()[1])
utils::getSrcDirectory()
?getSrcDirectory
rstudioapi::getActiveDocumentContext()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
ran = data.frame(x1 = 1, x2 = 2)
write.csv(ran,"samp_out.csv")
dirname(sys.frame(1)$ofile)
print(ran)
talent_kAB$playerID = droplevels(talent_kAB$playerID)
# compute career at a certain year
career_talent <- function(snippet, target_year){
snippet <- snippet %>% mutate(playerID = paste(playerID, "_proj", sep = ""))
do.call(rbind, lapply(snippet$yearID, function(xx){
batters_int <- foo %>% filter(yearID == target_year)
## top 3 type
yy <- sort(batters_int$scale_WAR)
n <- length(yy)
ytilde <- rep(0, n + 1)
ytilde[1] <- yy[1] - 1/(yy[n] - yy[1])
ytilde[n+1] <- yy[n] + 1/(yy[n] - yy[n-3])
ytilde[2:n] <- unlist(lapply(2:n, function(j){
(yy[j]+yy[j-1])/2
}))
batters_int <- rbind(batters_int, snippet %>% filter(yearID == xx))
batters_int$pops[nrow(batters_int)] <- batters_int$pops[1]
batters_int <- batters_int %>% arrange(WAR_talent) %>%
mutate(adj_WAR = order_qempirical(map_Pareto_vals_vec(WAR_talent, npop = pops),
ytilde = ytilde)) %>%
filter(playerID == unique(snippet$playerID))
batters_int
})) %>% mutate(span = target_year)
}
talent_kAB$playerID
unique(talent_kAB$playerID)
list(2)
lapply(list(2), function(xx){
int <- career_talent(talent_kAB %>% filter(playerID == xx), target_year = 2006)
int
})
career_kAB <- do.call(rbind, mclapply(unique(talent_kAB$playerID), function(xx){
int <- career_talent(talent_kAB %>% filter(playerID == xx), target_year = 2006)
int
}))
View(career_kAB)
lapply(list(1013828), function(xx){
int <- career_talent(talent_kAB %>% filter(playerID == xx), target_year = 2006)
int
lapply(list(1013828), function(xx){
int <- career_talent(talent_kAB %>% filter(playerID == xx), target_year = 2006)
int
})
lapply(list(1013828), function(xx){
int <- career_talent(talent_kAB %>% filter(playerID == xx), target_year = 2006)
int
})
lapply(list(1013828), function(xx){
int <- career_talent(talent_kAB %>% filter(playerID == xx), target_year = 2006)
int
})
lapply(list(1013828), function(xx){
int <- career_talent(talent_kAB %>% filter(playerID == xx), target_year = 2006)
int
})
lapply(list(1013828), function(xx){
int <- career_talent(talent_kAB %>% filter(playerID == xx), target_year = 2006)
int
})
lapply(list(1013828), function(xx){
int <- career_talent(talent_kAB %>% filter(playerID == xx), target_year = 2006)
int
})
lapply(list(1013828), function(xx){
int <- career_talent(talent_kAB %>% filter(playerID == xx), target_year = 2006)
int
})
lapply(list(1013828), function(xx){
int <- career_talent(talent_kAB %>% filter(playerID == xx), target_year = 2006)
int
})
lapply(list(1013828), function(xx){
int <- career_talent(talent_kAB %>% filter(playerID == xx), target_year = 2006)
int
})
lapply(list(1013828), function(xx){
int <- career_talent(talent_kAB %>% filter(playerID == xx), target_year = 2006)
int
})
lapply(list(1013828), function(xx){
int <- career_talent(talent_kAB %>% filter(playerID == xx), target_year = 2006)
int
})
lapply(list(1013828), function(xx){
int <- career_talent(talent_kAB %>% filter(playerID == xx), target_year = 2006)
int
})
lapply(list(1013828), function(xx){
int <- career_talent(talent_kAB %>% filter(playerID == xx), target_year = 2006)
int
})
lapply(list(1013828), function(xx){
int <- career_talent(talent_kAB %>% filter(playerID == xx), target_year = 2006)
int
})
quit()
view()
lapply(list(1013828), function(xx){
int <- career_talent(talent_kAB %>% filter(playerID == xx), target_year = 2006)
int
})
write.csv(WAR_batter_best, "WAR_batter_best.csv")
write.csv(WAR_pitcher_best, "WAR_pitcher_best.csv")
write.csv(WAR_batter_best, "WAR_batter_best.csv", index = F)
?write.csv
write.csv(WAR_batter_best, "WAR_batter_best.csv", row.names = F)
write.csv(WAR_pitcher_best, "WAR_pitcher_best.csv", row.names = F)
foo <- WAR_batter_best
foo$playerID <- droplevels(as.factor(foo$playerID))
bar <- split(foo, f = foo$playerID)
View(map_Pareto_vals_vec)
View(order_qempirical)
View(map_Y)
